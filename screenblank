#!/bin/bash
conf=$HOME/.config/screenblank.conf

set_conf() {
    [[ ! -e $conf ]] && {
        echo -e 'screenblank=on'
        echo -e 'autosuspend=on'
        echo -e 'autolock=on'
        echo -e 'blank="10"'
        echo -e 'blanklock=".5"'
        echo -e 'lock="30"'
        echo -e 'suspend="60"'
    } >> $conf
    [[ $(xset -q) = *"yes"* ]] && {
        xset s 0 0
        xset s noblank
        xset s noexpose
        xset dpms 0 0 0
    }
}

set_times() {
	. $conf
	times=( "$blank" "$blanklock" "$lock" "$suspend" )
	[[ "${times[@]}" != "${timeschk[@]}" ]] && {
		unset timesms timeschk
		for i in ${!times[*]}; do
			ms=$(echo "${times[i]}*60000-2000" | bc -l)
			timesms+=(${ms%.*}) timeschk+=(${times[i]})
		done
    }
}

if_video() {
	media=( "youtube\|vimeo\|twitch" "bomi" "mpv" )
	media2=( "Vivaldi\|Chromium" "bomi" "mpv" )
	for i in ${!media[*]}; do
		[[ $(pacmd list-sink-inputs | grep -B12 ${media2[i]}) = *"RUNNING"* ]] || continue
		[[ $(wmctrl -l | grep -i ${media[i]}) ]] && return 0
	done
	return 1
}

resetidle() {
	xdotool mousemove_relative --sync -- 25 25
	xdotool mousemove_relative --sync -- -25 -25
}

update() {
	sed -i "s/^\($1=\).*/\1$2/" $conf
}

sxl() {
	[[ $(nvidia-settings --query CurrentMetaMode) = *DPY-2* ]] && {
        $HOME/scripts/tv-toggle &
	    read -t 4 <> <(:)
    }
	sxlock
}

notify() {
	echo "$1"
	[[ $(pidof xfce4-notifyd) ]] && \
	notify-send "$1"
}

status() {
	if_video && \
	vid_playing="playing" || \
	vid_playing="not playing"

	echo -e "screenblank is $screenblank"
	echo -e "AutoLock is $autolock"
	echo -e "AutoSuspend is $autosuspend"
	echo -e "Video is $vid_playing"
	echo -e "-----------------------"
	echo -e "Blank Screen at $blank Mins"
	echo -e "Blank LockScreen at $blanklock Mins"
	echo -e "Lock at $lock Mins"
	echo -e "Suspend at $suspend Mins"
}

usage() {
	echo -e "screenblank: DPMS bash script of my personal preference"
    echo -e "\n"
	echo -e "Usage:"
	echo -e "screenblank"
	echo -e "run script without options to toggle on/off"
    echo -e "\n"
	echo -e "screenblank -ts | --toggle_suspend"
	echo -e "toggle AutoSuspend on/off"
    echo -e "\n"
	echo -e "screenblank -tl | --toggle_lock"
	echo -e "toggle AutoLock on/off"
    echo -e "\n"
	echo -e "screenblank -b | --blank"
	echo -e "blank the screen"
    echo -e "\n"
	echo -e "screenblank -l | --lock"
	echo -e "lock the screen with sxlock"
    echo -e "\n"
	echo -e "screenblank -s | --status"
	echo -e "check current configuration"
    echo -e "\n"
	echo -e "screenblank -h | --help"
	echo -e "view usage (this)"
    echo -e "\n"
	echo -e "screenblank -r | --reset"
	echo -e "reset the configuration"
    echo -e "\n"
	echo -e "screenblank -ab | --adjust_blank"
	echo -e "adjust Screen Blank time in minutes"
    echo -e "\n"
	echo -e "screenblank -alb | --adjust_ls_blank"
	echo -e "adjust LockScreen blank time in minutes"
    echo -e "\n"
	echo -e "screenblank -as | --adjust_suspend"
	echo -e "adjust Suspend time in minutes"
    echo -e "\n"
	echo -e "screenblank -al | --adjust_lock"
	echo -e "adjust Suspend time in minutes"
}

set_conf
. $conf

# Options
if [[ -z $1 ]]; then
     if [[ ! $(pgrep -c screenblank) == "2" ]]; then
        notify "screenblank Enabled"
        update screenblank on
    else
		notify "screenblank Disabled"
		update screenblank off
		pkill -x screenblank
    fi
elif [[ $# == 1 ]];then
	case "$1" in
		-ts | --toggle_suspend)
			if [[ $autosuspend == on ]]; then
				notify "AutoSuspend Disabled"
				update autosuspend off
			else
				notify "AutoSuspend Enabled"
				update autosuspend on
			fi
			;;
		-tl | --toggle_lock)
			if [[ $autolock == on ]]; then
				notify "AutoLock Disabled"
				update autolock off
			else
				notify "AutoLock Enabled"
				update autolock on
			fi
			;;
		-b | --blank)
			sleep 2
			xset dpms force off
			;;
		-l | --lock)
			[[ ! $(pidof sxlock) ]] && (sxl) &
			;;
		-s | --status)
			notify "$(status)"
			;;
		-h | --help)
			usage
			;;
		-r | --reset)
			rm $conf
			echo "conf reset"
			;;
		*)
			echo -e "(((invalid argument)))\n"
			usage
			exit 1
			;;
	esac
	exit 0
elif [[ $# == 2 ]];then
	[[ ! $2 =~ ^[.0-9]+$ ]] && {
	echo -e "(((invalid argument)))\n"
	usage
	exit 1;}
	case "$1" in
		-ab | --adjust_blank)
			if echo "$2 >= $suspend" | bc -l | grep -q 1; then
			echo "Can't be set higher than Suspend time"
			exit 1
			fi
			echo "Screen blank set at $2 mins"
			update blank $2
			;;
		-alb | --adjust_ls_blank)
			if echo "$2 >= $suspend" | bc -l | grep -q 1; then
			echo "Can't be set higher than Suspend time"
			exit 1
			fi
			echo "LockScreen blank set at $2 mins"
			update blanklock $2
			;;
		-al | --adjust_lock)
			if echo "$2 >= $suspend" | bc -l | grep -q 1; then
			echo "Can't be set higher than Suspend time"
			exit 1
			elif echo "$2 <= $blank" | bc -l | grep -q 1; then
			echo "Can't be set lower than Blank time"
			exit 1
			fi
			echo "AutoLock set at $2 mins"
			update lock $2
			;;
		-as | --adjust_suspend)
			echo "AutoSuspend set at $2 mins"
			update suspend $2
			;;
		*)
			echo -e "(((invalid argument)))\n"
			usage
			exit 1
			;;
	esac
	exit 0
else
	echo -e "(((invalid argument)))\n"
	usage
	exit 1
fi

# Running it
while true; do
	read -t 2 <> <(:)
	echo "$(xprintidle)"
	if [[ $(xset -q) == *"Monitor is Off"* ]]; then
		if_video || {
			[[ $autolock == on ]] && \
			[[ "$(xprintidle)" -ge "${timesms[2]}" ]] && \
			[[ ! $(pidof sxlock) ]] && (sxl) &
			[[ $autosuspend == on ]] && \
			[[ "$(xprintidle)" -ge "${timesms[3]}" ]] && {
				systemctl suspend && resetidle
				until [[ $(xset -q) == *"Monitor is On"* ]]; do
				xset dpms force on
				done
			}
		continue
		}
	elif [[ $(pidof sxlock) ]]; then
		[[ "$(xprintidle)" -le "${timesms[1]}" ]] && continue
	else
		while if_video; do
			echo "Video is playing"
			read -t 2 <> <(:)
			if_video || resetidle
			[[ $(pidof sxlock) ]] && break
		done
		set_conf
        set_times
		[[ "$(xprintidle)" -le "${timesms[0]}" ]] && continue
	fi
	xset dpms force off
done

