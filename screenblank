#!/bin/bash
conf=$HOME/.config/screenblank.conf

update_conf() {
	(
		echo -e screenblank="$screenblank"
		echo -e autosuspend="$autosuspend"
		echo -e autolock="$autolock"
		echo -e blank_time='"'"$blank_time"'"'
		echo -e blanklock_time='"'"$blanklock_time"'"'
		echo -e lock_time='"'"$lock_time"'"'
		echo -e suspend_time='"'"$suspend_time"'"'
	) > "$conf"
}

set_default_conf() {
	screenblank="on"
	autosuspend="on"
	autolock="on"
	blank_time="10"
	blanklock_time=".5"
	lock_time="30"
	suspend_time="60"
}

refresh_conf() {
	. "$conf" || error_found
	value_chk || error_found
	manual_edit_chk || error_found
}

set_times() {
	times=( "$blank_time" "$blanklock_time" "$lock_time" "$suspend_time" )
	if [[ "${times[*]}" != "${timeschk[*]}" ]]; then
		unset timesms timeschk
		for i in ${!times[*]}; do
			ms=$(echo "${times[i]}*60000-2000" | bc -l)
			[[ $ms =~ ^[.0-9]+$ ]] || return 1
			timesms+=("${ms%.*}") timeschk+=("${times[i]}")
		done
	fi
	return 0
}

manual_edit_chk() {
	[[ $(wc -l < "$conf") = 7 ]] || return 1
	[[ $screenblank = off ]] || [[ $screenblank = on ]] || return 1
	[[ $autosuspend = off ]] || [[ $autosuspend = on ]] || return 1
	[[ $autolock = off ]] || [[ $autolock = on ]] || return 1
}

value_chk() {
	set_times || return 1
	[[ "${timesms[0]}" -le "${timesms[3]}" ]] || return 1
	[[ "${timesms[1]}" -le "${timesms[3]}" ]] || return 1
	[[ "${timesms[2]}" -le "${timesms[3]}" ]] || return 1
	[[ "${timesms[2]}" -ge "${timesms[0]}" ]] || return 1
}

error_found() {
	[[ $screenblank = off ]] && exit 1

	if [[ -e "$conf" ]]; then
		notify "error in config file. resetting"
	else
		notify "config not found. Creating one now"
	fi
	set_default_conf && update_conf
	refresh_conf
}

disable_xset_presets() {
    if [[ $(xset -q) = *"yes"* ]]; then
        xset s 0 0
        xset s noblank
        xset s noexpose
        xset dpms 0 0 0
	fi
}

if_video() {
	media=( "youtube\|vimeo\|vrv\|twitch" "bomi" "mpv" "VLC" )
	media2=( "Brave\|Vivaldi\|Chromium\|firefox" "bomi" "mpv" "VLC" )
	for i in ${!media[*]}; do
		[[ $(pacmd list-sink-inputs | grep -B12 "${media2[i]}") = *"RUNNING"* ]] || continue
		[[ $(wmctrl -l | grep -i "${media[i]}") ]] && return 0
	done
	return 1
}

resetidle() {
	xdotool mousemove_relative --sync -- 25 25
	xdotool mousemove_relative --sync -- -25 -25
}

ci3() {
	[[ $(pidof i3lock) ]] && return
	IMAGE="/tmp/lockscreen.png"
	scrot $IMAGE
	convert $IMAGE -scale 10% -scale 1000% $IMAGE
	convert $IMAGE -fill black -colorize 25% $IMAGE
	i3lock -e -i $IMAGE \
 		--insidever-color=b8bb2666 --insidewrong-color=fb493466 --inside-color=3c383666 \
 		--ringver-color=b8bb2699 --ringwrong-color=fb493499 --ring-color=282828 \
 		--keyhl-color=b8bb2699 --bshl-color=fb493499 --separator-color=282828 \
 		--line-uses-inside --verif-color=ebdbb2 --wrong-color=ebdbb2 \
 		--ind-pos="w/2+1920:h/2+140" --time-pos="w/2+1920:h/2-100" \
		--date-pos="w/2+1920:h/2-40" --greeter-pos="w/2+1920:h/2+100" \
 		--verif-text="checking" --wrong-text="no thanks" \
 		--verif-font="JetBrains Mono:style=regular" --wrong-font="JetBrains Mono:style=italic,bold" \
 		--verif-size=23 --wrong-size=23 \
 		--radius 80 --ring-width 4 \
 		--time-str="%l:%M %P" --time-size=110 \
 		--date-str="%a, %b %d" --date-size=40 \
 		--clock --date-font="JetBrains Mono:style=regular" --time-font="JetBrains Mono:style=bold" \
 		--date-color=ebdbb2 --time-color=b8bb26 --greeter-color=ebdbb2 \
 		--pass-media-keys --pass-screen-keys --pass-power-keys --pass-volume-keys
	rm $IMAGE
	return 0
}

notify() {
	echo "$1"
	notify-send "$1"
}

clean_exit() {
	[[ $screenblank = on ]] && \
	screenblank=off && update_conf
	exit
}

status() {
	echo -e "screenblank is $screenblank"
	echo -e "AutoLock is $autolock"
	echo -e "AutoSuspend is $autosuspend"

	if if_video; then
		echo -e "Video is playing"
	else
		echo -e "Video is not playing"
	fi

	echo -e "-----------------------"
	echo -e "Blank Screen at $blank_time Mins"
	echo -e "Blank LockScreen at $blanklock_time Mins"
	echo -e "Lock at $lock_time Mins"
	echo -e "Suspend at $suspend_time Mins"
}

usage() {
	echo -e "screenblank: DPMS bash script of my personal preference"
	echo -e "\n"
	echo -e "Usage:"
	echo -e "screenblank"
	echo -e "run script without options to toggle on/off"
	echo -e "\n"
	echo -e "screenblank -ts | --toggle_suspend"
	echo -e "toggle AutoSuspend on/off"
	echo -e "\n"
	echo -e "screenblank -tl | --toggle_lock"
	echo -e "toggle AutoLock on/off"
	echo -e "\n"
	echo -e "screenblank -b | --blank"
	echo -e "blank the screen"
	echo -e "\n"
	echo -e "screenblank -l | --lock"
	echo -e "lock the screen with i3lock"
	echo -e "\n"
	echo -e "screenblank -s | --status"
	echo -e "check current configuration"
	echo -e "\n"
	echo -e "screenblank -h | --help"
	echo -e "view usage (this)"
	echo -e "\n"
	echo -e "screenblank -r | --reset"
	echo -e "reset the configuration"
	echo -e "\n"
	echo -e "screenblank -ab | --adjust_blank"
	echo -e "adjust Screen Blank time in minutes"
	echo -e "\n"
	echo -e "screenblank -alb | --adjust_ls_blank"
	echo -e "adjust LockScreen blank time in minutes"
	echo -e "\n"
	echo -e "screenblank -as | --adjust_suspend"
	echo -e "adjust Suspend time in minutes"
	echo -e "\n"
	echo -e "screenblank -al | --adjust_lock"
	echo -e "adjust Suspend time in minutes"
}

. "$conf" || { error_found; screenblank=off; }

# Options
if [[ -z $1 ]]; then
	if [[ $screenblank = on ]]; then
		notify "screenblank exiting"
		screenblank=off && update_conf
		exit 0
	else
		trap 'clean_exit' EXIT INT TERM SIGINT SIGTERM SIGTSTP
		[[ "$(pidof -x "${0##*/}" -o %PPID)" ]] && exit
		disable_xset_presets
		notify "screenblank enabled"
		screenblank=on && update_conf
	fi
elif [[ $# = 1 ]];then
	case "$1" in
		-ts | --toggle_suspend)
			if [[ $autosuspend = on ]]; then
				notify "AutoSuspend Disabled"
				autosuspend=off
			else
				notify "AutoSuspend Enabled"
				autosuspend=on
			fi
			update_conf
			;;
		-tl | --toggle_lock)
			if [[ $autolock = on ]]; then
				notify "AutoLock Disabled"
				autolock=off
			else
				notify "AutoLock Enabled"
				autolock=on
			fi
			update_conf
			;;
		-b | --blank)
			read -rt 2 <> <(:)
			xset dpms force off
			;;
		-l | --lock)
			ci3
			;;
		-s | --status)
			notify "$(status)"
			;;
		-h | --help)
			usage
			;;
		-r | --reset)
			set_default_conf && update_conf
			notify "conf reset"
			;;
		*)
			echo -e "(((invalid argument)))\n"
			usage
			exit 1
			;;
	esac
	exit 0
elif [[ $# = 2 ]];then
	[[ ! $2 =~ ^[.0-9]+$ ]] && {
	echo -e "(((invalid argument)))\n"
	usage
	exit 1;}
	case "$1" in
		-ab | --adjust_blank)
			blank_time=$2
			if value_chk; then
				echo "Screen blank set at $2 mins"
			else
				echo "Can't be set higher than Suspend time"
				exit 1
			fi
			;;
		-alb | --adjust_ls_blank)
			blanklock_time=$2
			if value_chk; then
				echo "Lockscreen blank set at $2 mins"
			else
				echo "Can't be set higher than Suspend time"
				exit 1
			fi
			;;
		-al | --adjust_lock)
			lock_time=$2
			if value_chk; then
				echo "AutoLock set at $2 mins"
			else
				echo "Can't be set higher than Suspend time or lower than Blank time"
				exit 1
			fi
			;;
		-as | --adjust_suspend)
			suspend_time=$2
			if value_chk; then
				echo "AutoSuspend set at $2 mins"
			else
				echo "Must be the longest set time"
				exit 1
			fi
			;;
		*)
			echo -e "(((invalid argument)))\n"
			usage
			exit 1
			;;
	esac
	update_conf
	exit 0
else
	echo -e "(((invalid argument)))\n"
	usage
	exit 1
fi

while [[ $screenblank = on ]]; do
	read -rt 2 <> <(:)
	refresh_conf

	# Checks for the auto modes
	if [[ "$(xprintidle)" -ge "${timesms[2]}" ]]; then
		[[ $autolock = on ]] && ci3
	fi
	if [[ "$(xprintidle)" -ge "${timesms[3]}" ]]; then
		if [[ $autosuspend = on ]]; then
		systemctl suspend && resetidle
		xset dpms force on
		fi
	fi

	# Check if screen is locked else check if video is playing
	if [[ $(pidof i3lock) ]]; then
		[[ "$(xprintidle)" -le "${timesms[1]}" ]] && continue
	else
		while if_video; do
			echo "Video is playing"
			read -rt 2 <> <(:)
			if_video || resetidle
			[[ $(pidof i3lock) ]] && break
			refresh_conf
			[[ $screenblank = off ]] && break
		done
		[[ "$(xprintidle)" -le "${timesms[0]}" ]] && continue
	fi
	xset dpms force off		# Doesn't always work first time while screen is locked
done

notify "screenblank disabled"
exit 0
