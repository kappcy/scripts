#!/bin/bash
conf=$HOME/.config/screenblank.conf

# Default timings in minutes
Default_blank="10"
Default_blanklock=".5"
Default_suspend="60"

set_conf() {
	if [[ ! -e $conf ]]; then
		cat <<-EOF >> $conf
		screensaver=on
		autosuspend=on
		blank=$Default_blank
		blanklock=$Default_blanklock
		suspend=$Default_suspend
		vid_vid_playing=0
		EOF
	fi
	if xset -q | grep "yes" &> /dev/null; then
		xset s 0 0
		xset s noblank
		xset s noexpose
		xset dpms 0 0 0
	fi
}

set_times() {
	source $conf
	times=( "$blank" "$blanklock" "$suspend" )
	CHK1=${times[@]}
	CHK2=${timesCHK[@]}
	if [ "$CHK1" != "$CHK2" ]; then
		timesMS=() timesCHK=()
		for i in ${!times[*]}; do
			MS=$(echo "${times[i]}*60000-2000" | bc -l)
			timesMS+=(${MS%.*}) timesCHK+=(${times[i]})
		done
	fi
}

if_video() {
	media=( "youtube\|vimeo\|twitch" "bomi" "mpv")
	media2=( "Vivaldi" "bomi" "mpv")
	for i in ${!media[*]}; do
		if [[ $(wmctrl -l | grep -i "${media[i]}") ]] && \
		[[ $(pacmd list-sink-inputs | grep -B12 ${media2[i]} | grep RUNNING) ]]
		then vid_playing=1 && break
		else vid_playing=0
		fi
	done
}

resetidle() {
	xdotool mousemove_relative --sync -- 25 25 
	xdotool mousemove_relative --sync -- -25 -25
}

update() {
	sed -i "s/^\($key=\).*/\1$value/" $conf
}

killtv() {
	DVI="DPY-0: nvidia-auto-select +1920+0 {ForceCompositionPipeline=On}"
	HDMI="DPY-1: nvidia-auto-select +0+0 {ForceCompositionPipeline=On}"
	if [[ $(nvidia-settings --query CurrentMetaMode | grep +3840) ]]; then
	   nvidia-settings --assign CurrentMetaMode="$DVI, $HDMI"
	   sleep 1
	fi
}

lock() {
	scrot /tmp/screen.png
	betterlockscreen -u /tmp/screen.png
	betterlockscreen -l dimblur
}

status() {
	cat <<-EOH
	Screensaver is $screensaver
	AutoSuspend is $autosuspend
	-----------------------
	Blank Screen at $blank Mins
	Blank LockScreen at $blanklock Mins
	Suspend at $suspend Mins

	EOH
}

usage() {
	cat <<-EOH
	screenblank: Screensaver script for finer control over xset. (in my opinion)
	
	Usage:
	screenblank
	run script without options to toggle on/off
			
	screenblank -t | --toggle
	toggle AutoSuspend on/off

	screenblank -b | --blank
	blank the screen

	screenblank -l | --lock
	lock the screen with "betterlockscreen"

	screenblank -s | --status
	check current configuration

	screenblank -h | --help
	view usage (this)

	screenblank -r | --reset
	reset the configuration

	screenblank -ab | --adjust_blank
	adjust Screen Blank time in minutes

	screenblank -al | --adjust_lockblank
	adjust LockScreen blank time in minutes

	screenblank -as | --adjust_suspend
	adjust Suspend time in minutes
	EOH
}

set_conf
. $conf

# Options
if [[ -z $1 ]]; then
     if [[ ! $(pgrep -c screenblank) == "2" ]]; then
        echo "Screensaver Enabled"
        notify-send "Screensaver Enabled"
        key=screensaver value=on update
    else
        echo "Screensaver Disabled"
        notify-send "Screensaver Disabled"
        key=screensaver value=off update
		pkill -x screenblank
    fi
elif [[ $# == 1 ]];then
	case "$1" in
		-t | --toggle)
			if [[ $autosuspend == on ]]; then
				echo "AutoSuspend Disabled"
				notify-send "AutoSuspend Disabled"
				key=autosuspend value=off update
			else
				echo "AutoSuspend Enabled"
				notify-send "AutoSuspend Enabled"
				key=autosuspend value=on update
			fi
			;;
		-b | --blank)
			sleep 2
			xset dpms force off
			;;
		-l | --lock)
			lock
			;;
		-s | --status)
			echo "$(status)"
			notify-send "$(status)"
			;;
		-h | --help)
			usage
			;;
		-r | --reset)
			rm $conf
			set_conf
			echo "conf reset"
			;;
		--b4suspend)
			killtv
			lock
			;;
		*)
			echo -e "(((invalid argument)))\n"
			usage
			;;
	esac
	exit 1
elif [[ $# == 2 ]];then
	[[ ! $2 =~ ^[.0-9]+$ ]] && \
	echo -e "(((error: Not a number)))\n" && usage
	case "$1" in
		-ab | --adjust_blank)
			if echo "$2 >= $suspend" | bc -l | grep -q 1; then
			echo "Can't be set higher than Suspend time"
			else
			echo "Screen blank set at $2 mins"
			key=blank value=$2 update
			fi
			;;
		-al | --adjust_lockblank)
			if echo "$2 >= $suspend" | bc -l | grep -q 1; then
			echo "Can't be set higher than Suspend time"
			else
			echo "LockScreen blank set at $2 mins"
			key=blanklock value=$2 update
			fi
			;;
		-as | --adjust_suspend)
			echo "Suspend set at $2 mins"
			key=suspend value=$2 update
			;;
		*)
			echo -e "(((invalid argument)))\n"
			usage
			;;
	esac
	exit 1
else
	echo -e "(((invalid argument)))\n" 
	usage
	exit 1
fi

# Running it
while true; do
	sleep 2
	if [[ $(xset -q  | grep -i "monitor is off") ]]; then
		if [ $autosuspend == on ] && [ "$(xprintidle)" -ge "${timesMS[2]}" ]; then
			systemctl suspend
			until xset -q  | grep -i "monitor is on"; do xset dpms force on; done
			resetidle
		fi
		continue
	elif [[ $(pgrep i3lock) ]]; then
		[[ "$(xprintidle)" -le "${timesMS[1]}" ]] && continue
	else
		if [ $vid_playing == 1 ]; then
			if_video; [[ $vid_playing == 0 ]] && resetidle
			continue
		fi
		set_conf; set_times; if_video;
		[[ "$(xprintidle)" -le "${timesMS[0]}" ]] && continue
	fi
	xset dpms force off
done
